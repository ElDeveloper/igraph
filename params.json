{"name":"igraph","tagline":"An interactive 3D graph visualizer for modern browsers.","body":"Examples\r\n========\r\n\r\n * [les mis√©rables](http://patrickfuller.github.io/igraph/examples/miserables.html)\r\n * [github connections](http://patrickfuller.github.io/igraph/examples/github.html)\r\n\r\nUsage\r\n=====\r\n\r\n```javascript\r\nigraph.create('my-selector');\r\nigraph.draw(myGraph);\r\n```\r\n\r\nwhere `'my-selector'` is where you want to place igraph, and `myGraph` is a plain ol' object. See below for more on the object structure, or just check out the included example. The `igraph.create()` method takes a few optional parameters, specifying the sizes and colors of nodes, as well as force-directed optimization.\r\n\r\n```javascript\r\noptions = {\r\n    directed: true, // Toggles edge arrows\r\n    nodeSize: 2.0, // Default node size\r\n    edgeSize: 0.25, // Edge connection diameter\r\n    arrowSize: 1.0, // If drawn, edge arrow size\r\n    defaultNodeColor: \"0xaaaaaa\", // Color for nodes without a \"color\" property\r\n    defaultEdgeColor: \"0x777777\", // Color for edges without a \"color\" property\r\n    shader: THREE.ShaderToon.toon2, // three.js shader algorithm to use\r\n    runOptimization: true // Runs a force-directed-layout algorithm on the graph\r\n};\r\n```\r\n\r\nGraph Data Format\r\n=================\r\n\r\nThe viewers take input graph data structures as javascript objects. Here's the most boring graph in the world:\r\n\r\n```javascript\r\n{\r\n    nodes: {\r\n        jane: { },\r\n        bob: { },\r\n        mike: { },\r\n        sally: { }\r\n    },\r\n    edges: [\r\n        { source: \"jane\", target: \"bob\" },\r\n        { source: \"bob\", target: \"mike\" },\r\n        { source: \"mike\", target: \"sally\" }\r\n    ]\r\n}\r\n```\r\n\r\nNodes require no information outside of their keys. However, there are useful optional parameters that can be specified.\r\n\r\n```javascript\r\n{\r\n    color: \"0xffffff\", // Color for this node\r\n    size: 1.0, // Scaling factor for this node's size\r\n    location: [0.0, 0.0, 0.0] // Starting location of node. Useful for pre-rendering.\r\n}\r\n```\r\n\r\nBy default, the algorithm runs a force-directed layout on the graph. When enabled, the \"location\" field is optional. However, for larger graphs, you will want to disable this feature and pre-render the locations. Use the associated Python script to do so.\r\n\r\nIPython support\r\n===============\r\n\r\nThe IPython notebook is an open-source tool poised to replace MATLAB in many\r\napplications. As a scientist of sorts, I'm all about it. Therefore, I made\r\nhandles to use igraph with the notebook.\r\n\r\nOpen a new notebook and make sure that the igraph directory is either in the directory you started the notebook or your PYTHONPATH. You can test the setup by typing:\r\n\r\n```python\r\nimport igraph\r\nigraph.draw([(1, 2), (2, 3), (3, 4), (4, 1), (4, 5), (5, 2)])\r\n```\r\n\r\ninto a notebook cell. You should get a paddlewheel graph as an output. You can use this in conjunction with other code for educational purposes (try generating a red-black tree!). There are three commands and some optional parameters to check out. Read the docstrings for more.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}