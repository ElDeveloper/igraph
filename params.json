{"name":"igraph","tagline":"An interactive 3D graph visualizer for modern browsers.","body":"igraph\r\n======\r\n\r\nAn interactive 3D graph visualizer for modern browsers. Check out the demo\r\n[here](http://www.patrick-fuller.com/igraph/examples/).\r\n\r\nFor publication-quality renderings of 3D graphs, check out the [blender-graphs](https://github.com/patrickfuller/blender-graphs) project.\r\n\r\n![](http://imgur.com/98C5eoJ.png)\r\n\r\nUsage\r\n=====\r\n\r\n```\r\nigraph.create('my-selector');\r\nigraph.draw(myGraph);\r\n```\r\n\r\nwhere `'my-selector'` is where you want to place igraph, and `myGraph` is\r\nan object. See below for more on the object structure, or just check out the\r\nincluded example. The `igraph.create()` method takes a few optional parameters, specifying the\r\nsizes and colors of nodes, as well as force-directed optimization. Read the source for more.\r\n\r\nIPython support\r\n===============\r\n\r\nThe IPython notebook is an open-source tool poised to replace MATLAB in many\r\napplications. As a scientist (of sorts), I'm all about it. Therefore, I made\r\nhandles to use igraph with the notebook.\r\n\r\nOpen a new notebook with `ipython notebook` and make sure that the `igraph`\r\ndirectory is either in the directory you started the notebook or your\r\nPYTHONPATH. You can test the setup by typing:\r\n\r\n```python\r\nimport igraph\r\nigraph.draw([(1, 2), (2, 3), (3, 4), (4, 1), (4, 5), (5, 2)])\r\n```\r\n\r\ninto a notebook cell. You should get a paddlewheel graph as an output. You can\r\nuse this in conjunction with other code for educational purposes. Try\r\ngenerating a red-black tree! There are three commands and some optional\r\nparameters to check out. Read the docstrings for more.\r\n\r\nGraph Data Format\r\n=================\r\n\r\nThe viewers take input graph data structures as javascript objects. As an\r\nexample, consider:\r\n\r\n```\r\n{\r\n    \"nodes\": {\r\n        \"jane\": { },\r\n        \"bob\": { \"location\": [ -1.115, -2.167, -3.103 ], \"color\": \"0x0000ff\" },\r\n        \"mike\": { \"color\": \"0xff0000\" },\r\n        \"sally\": { \"location\": [ 3.348, 6.252, 8.937 ] }\r\n    },\r\n    \"edges\": [\r\n        { \"source\": \"jane\", \"target\": \"bob\" },\r\n        { \"source\": \"bob\", \"target\": \"mike\" },\r\n        { \"source\": \"mike\", \"target\": \"sally\" }\r\n    ]\r\n}\r\n```\r\n\r\nNodes and edges can be colored by specifying a `\"color\"` field. If not specified,\r\nthe visualizer defaults to grayscale (this behavior can be changed).\r\n\r\nBy default, the algorithm runs a force-directed layout on the graph. When enabled,\r\nthe `\"location\"` field is optional. However, for larger graphs, you will want to\r\ndisable this feature and pre-render the locations. Use the associated Python\r\nscript to do so.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}